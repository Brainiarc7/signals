digraph "Signals::ExecutorThread&lt; R(Args...)&gt;"
{
 // INTERACTIVE_SVG=YES
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Signals::ExecutorThread\l\< R(Args...)\>\n||+ ExecutorThread()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Signals::IExecutor\l\< R(Args...)\>\n||+ ~IExecutor()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_signals_1_1_i_executor_3_01_r_07_args_8_8_8_08_4.html"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -threadPool" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{Signals::ThreadPool\n|- done\l- waitAndExit\l- threads\l|+ ThreadPool()\l+ ~ThreadPool()\l+ WaitForCompletion()\l+ submit()\l- ThreadPool()\l- run()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_signals_1_1_thread_pool.html"];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -workQueue" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{Signals::Queue\< std\l::function\< void(void)\> \>\n|# mutex\l# dataQueue\l# dataAvailable\l|+ Queue()\l+ ~Queue()\l+ push()\l+ tryPop()\l+ pop()\l+ clear()\l# pushUnsafe()\l- Queue()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_signals_1_1_queue.html"];
}
