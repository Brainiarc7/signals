digraph "Modules::ModuleDynI"
{
 // INTERACTIVE_SVG=YES
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Modules::ModuleDynI\n||+ ModuleDynI()\l+ ~ModuleDynI()\l+ addInput()\l+ getNumInputs()\l+ getInput()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Modules::Module\n||+ Module()\l+ ~Module()\l+ flush()\l- Module()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_module.html"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Modules::IModule\n||+ ~IModule()\l+ process()\l+ flush()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_modules_1_1_i_module.html"];
  Node4 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Modules::InputCap\n|# inputs\l|+ ~InputCap()\l+ addInput()\l+ getNumInputs()\l+ getInput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_input_cap.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{Modules::IInputCap\n||+ ~IInputCap()\l+ getNumInputs()\l+ getInput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_modules_1_1_i_input_cap.html"];
  Node6 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{Modules::OutputCap\n|- outputs\l- m_isLowLatency\l|+ ~OutputCap()\l+ getNumOutputs()\l+ getOutput()\l+ setLowLatency()\l# addOutput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_output_cap.html"];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{Modules::IOutputCap\n||+ ~IOutputCap()\l+ getNumOutputs()\l+ getOutput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_modules_1_1_i_output_cap.html"];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{Modules::Mux::GPACMuxMP4\n|- m_iso\l- m_trackId\l- m_DTS\l- m_lastInputTimeIn180k\l- m_useFragments\l- m_curFragDur\l- m_useSegments\l- m_chunkDuration\l- m_chunkNum\l- m_chunkName\l- output\l- @1\l|+ GPACMuxMP4()\l+ ~GPACMuxMP4()\l+ process()\l+ flush()\l- declareStream()\l- declareStreamVideo()\l- declareStreamAudio()\l- sendOutput()\l- addSample()\l- setupFragments()\l- closeSegment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_mux_1_1_g_p_a_c_mux_m_p4.html"];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{Modules::Mux::GPACMuxMPEG2TS\n||+ GPACMuxMPEG2TS()\l+ ~GPACMuxMPEG2TS()\l+ process()\l- declareStream()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_mux_1_1_g_p_a_c_mux_m_p_e_g2_t_s.html"];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{Modules::Mux::LibavMux\n|- m_formatCtx\l- m_headerWritten\l|+ LibavMux()\l+ ~LibavMux()\l+ process()\l- ensureHeader()\l- declareStream()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_mux_1_1_libav_mux.html"];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{Modules::Stream::Apple_HLS\n|- numDataQueueNotify\l- workingThread\l- type\l- segDurationInMs\l|+ Apple_HLS()\l+ ~Apple_HLS()\l+ process()\l+ flush()\l- HLSThread()\l- GenerateM3U8()\l- endOfStream()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_stream_1_1_apple___h_l_s.html"];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{Modules::Stream::MPEG_DASH\n|- numDataQueueNotify\l- workingThread\l- mpdPath\l- type\l- segDurationInMs\l- totalDurationInMs\l- meta\l- mpd\l|+ MPEG_DASH()\l+ ~MPEG_DASH()\l+ process()\l+ flush()\l- DASHThread()\l- endOfStream()\l- generateMPD()\l- ensureMPD()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_modules_1_1_stream_1_1_m_p_e_g___d_a_s_h.html"];
}
